### A Pluto.jl notebook ###
# v0.16.1

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ‚ïî‚ïê‚ï° 980f4910-96f3-11eb-0d4f-b71ad9888d73
begin
	# ativando ambiente
	using Pkg; Pkg.activate(@__DIR__); Pkg.instantiate()
	
	# carregando pacotes necess√°rios
	using GeoStats, DrillHoles
	using CSV, DataFrames, Query
    using Statistics, StatsBase
	using LinearAlgebra, Random 
	using FileIO, PlutoUI
    using Plots, StatsPlots
	
	# configura√ß√µes de plotagem
	gr(format=:png)
end;

# ‚ïî‚ïê‚ï° 14ac7b6e-9538-40a0-93d5-0379fa009872
html"""
<p style="background-color:lightgrey" xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/"><span property="dct:title">&nbsp&nbspüèÜ&nbsp<b>Projeto Final</b></span> por <span property="cc:attributionName">Franco Naghetini</span> √© licenciado sob <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p>
"""

# ‚ïî‚ïê‚ï° 6b7e7c5d-7a86-4ea4-a47e-fb4148030c1a
PlutoUI.TableOfContents(aside=true, title="Sum√°rio",
						indent=true, depth=2)

# ‚ïî‚ïê‚ï° 3afd7a32-3696-4cea-b00c-b52bfdb003ba
md"""
![ufmg-logo](https://logodownload.org/wp-content/uploads/2015/02/ufmg-logo-2.png)
"""

# ‚ïî‚ïê‚ï° c544614a-3e5c-4d22-9340-592aabf84871
md"""
# üèÜ Projeto Final

Este √∫ltimo m√≥dulo visa demonstrar, na pr√°tica, um fluxo de trabalho completo de estimativa de recursos realizado com o pacote [GeoStats.jl](https://github.com/JuliaEarth/GeoStats.jl). Para isso, utilizaremos todo o conhecimento adquirido nos cinco m√≥dulos anteriores. Abordaremos desde a etapa de importa√ß√£o dos dados brutos (tabelas Collar, Survey e Assay) at√© a gera√ß√£o de um modelo de teores 3D.

> ‚ö†Ô∏è Nos dois √∫ltimos m√≥dulos trabalhamos com uma base de dados 2D (i.e. Walker Lake). Neste m√≥dulo, no entanto, trabalharemos com um banco de dados 3D e, por isso, adaptaremos alguns conceitos.

O produto final deste m√≥dulo √© um modelo de blocos estimado (i.e. modelo de teores) por diferentes m√©todos: Inverso do Quadrado da Dist√¢ncia (IQD), Krigagem Simples (KS) e Krigagem Ordin√°ria (KO).
"""

# ‚ïî‚ïê‚ï° 3353d0be-4280-4ffd-824b-745bb6b64f41
md"""
>##### üìö Sobre
>- Voc√™ pode exportar este notebook como PDF ou HTML est√°tico. Para isso, clique no √≠cone üî∫üî¥, localizado no canto superior direito da pagina. Entretanto, ambos os formatos n√£o s√£o compat√≠veis com os recursos interativos do notebook.
>- Caso deseje executar alguma c√©lula do notebook, clique no √≠cone ‚ñ∂Ô∏è, localizado no canto inferior direito da c√©lula.
>- Algumas c√©lulas encontram-se ocultadas (e.g. c√©lulas que geram os plots). Voc√™ pode clicar no √≠cone üëÅÔ∏è, localizado no canto superior esquerdo da c√©lula, para ocult√°-la ou exib√≠-la.
>- A explica√ß√£o das c√©lulas que geram os plots est√° fora do escopo deste notebook. Entretanto, a sintaxe √© bem intuitiva e pode ser facilmente compreendida!
>- Voc√™ pode ainda clicar no √≠cone `...`, no canto superior direito de uma c√©lula, para exclu√≠-la do notebook.
>- Algumas c√©lulas deste notebook encontram-se encapsuladas pela express√£o `md"..."` (e.g. esta c√©lula). Essas s√£o c√©lulas de texto chamadas de *markdown*. Caso deseje aprender um pouco mais sobre a linguagem *markdown*, clique [aqui](https://docs.pipz.com/central-de-ajuda/learning-center/guia-basico-de-markdown#open).
>- No Pluto, todos os pacotes devem ser importados/baixados na primeira c√©lula do notebook. Clique no √≠cone üëÅÔ∏è para exibir essa c√©lula ou consulte a se√ß√£o *Pacotes utilizados* deste notebook para saber mais informa√ß√µes sobre os pacotes.
>- Utilize a macro ` @which` para verificar a qual pacote uma determinada fun√ß√£o pertence.
>- Voc√™ pode utilizar este notebook da forma que quiser, basta referenciar [este link](https://github.com/fnaghetini/intro-to-geostats). Consulte a [licen√ßa]  (https://creativecommons.org/licenses/by/4.0/?ref=chooser-v1) para saber mais detalhes.
>- Para mais informa√ß√µes acesse o [README](https://github.com/fnaghetini/intro-to-geostats/blob/main/README.md) do projeto üöÄ
"""

# ‚ïî‚ïê‚ï° 8e2b3339-a65d-4e1b-a9fb-69b6cd4631ea
md"""
## 1. Base de dados

Neste m√≥dulo, utilizaremos uma base de dados desenvolvida pelo autor, denominada [Junipero](). Ela consiste em conjunto de furos realizados durante uma campanha de sondagem em um dep√≥sito fict√≠cio de Cu P√≥rfiro. Portanto, estaremos interessados na estimativa da commodity Cu (%).

A Figura 01 mostra os campos presentes nas quatro tabelas do banco de dados.
"""

# ‚ïî‚ïê‚ï° af1aca7e-bde2-4e14-a664-b7c71ff80ffe
md"""
![tabelas_raw](https://i.postimg.cc/52Qz4t7Z/tables.jpg)

**Figura 01:** Tabelas Collar, Survey, Assay e Litho e seus respectivos campos.
"""

# ‚ïî‚ïê‚ï° ff01a7d7-d491-4d49-b470-a2af6783c82b
md"""
## 2. Gera√ß√£o de furos

Primeiramente, vamos importar as quatro tabelas (i.e. Collar, Survey, Assay e Litho), utilizando o pacote [DrillHoles.jl](https://github.com/JuliaEarth/DrillHoles.jl)...
"""

# ‚ïî‚ïê‚ï° 444402c6-99a3-4829-9e66-c4962fb83612
begin
	collar = Collar(file="data/Junipero/collar.csv",
					holeid=:HOLEID, x=:X, y=:Y, z=:Z)

	survey = Survey(file="data/Junipero/survey.csv",
					holeid=:HOLEID, at=:AT, azm=:AZM, dip=:DIP)

	assay  = Interval(file="data/Junipero/assay.csv",
					 holeid=:HOLEID, from=:FROM, to=:TO)

	litho  = Interval(file="data/Junipero/litho.csv",
					  holeid=:HOLEID, from=:FROM, to=:TO)
end;

# ‚ïî‚ïê‚ï° 0d0d610a-b06c-4c16-878d-8d2d124b8b9e
md"""
Em seguida, podemos utilizar a fun√ß√£o `drillhole` do mesmo pacote para gerar os furos de sondagem...
"""

# ‚ïî‚ïê‚ï° 1d7df6f8-f643-4c1e-92b4-52e51c4ccda8
drillholes = drillhole(collar, survey, [assay, litho])

# ‚ïî‚ïê‚ï° bb8336ba-f347-418c-8883-47d86350bc94
md"""
Vamos, agora, armazenar uma c√≥pia da tabela de furos na vari√°vel `dh`...
"""

# ‚ïî‚ïê‚ï° 412cfe3d-f9f1-49a5-9f40-5ab97946df6d
dh = copy(drillholes.table);

# ‚ïî‚ïê‚ï° d343401d-61dc-4a45-ab9b-beaff2534886
md"""
##### Observa√ß√µes

- Ap√≥s a gera√ß√£o dos furos, n√£o h√° inconsist√™ncias em nenhuma das tabelas importadas.
"""

# ‚ïî‚ïê‚ï° ec102b27-79e2-4a91-99d6-dff061752855
md"""
> ‚ö†Ô∏è Caso algo n√£o tenha ficado claro, consulte o [m√≥dulo 2](https://github.com/fnaghetini/intro-to-geostats/blob/main/2-preparacao_de_amostras.jl).
"""

# ‚ïî‚ïê‚ï° bedcf585-53ef-4cf6-9dc2-d3fc9cff7755
md"""
## 3. Limpeza dos dados

Nesta se√ß√£o, iremos verificar a necessidade de se realizar uma limpeza na base de dados. Uma das primeiras atitudes a se tomar quando se lida com um novo banco de dados √© a visualiza√ß√£o do sum√°rio estat√≠stico de suas colunas. Frequentemente s√£o encontrados valores faltantes e eventuais inconsist√™ncias. Podemos fazer isso com a fun√ß√£o `describe`...
"""

# ‚ïî‚ïê‚ï° 15fd1c4d-fbf2-4389-bc1c-eabbbd26817b
describe(dh)

# ‚ïî‚ïê‚ï° 39ae0ea7-9659-4c7b-b161-fd9c3495f4e3
md"""
##### Observa√ß√µes

- Existem 307 valores faltantes das vari√°veis `CU` e `LITH`;
- As vari√°veis que deveriam ser num√©ricas foram reconhecidas como tal;
- N√£o existem valores an√¥malos que "saltam aos olhos".
"""

# ‚ïî‚ïê‚ï° f9545a95-57c0-4de6-9ab7-3ac3728b3d27
md"""
Como o objetivo deste m√≥dulo √© a gera√ß√£o de um modelo de estimativas de Cu (%), podemos remover os 307 valores faltantes do banco de dados e recalcular o sum√°rio estat√≠stico para validar essa opera√ß√£o. Para a remo√ß√£o dos valores faltantes, utilizaremos a fun√ß√£o `dropmissing!`...
"""

# ‚ïî‚ïê‚ï° 4d5f2467-c7d5-4a82-9968-97f193090bd6
begin
    dropmissing!(dh)

    describe(dh)
end

# ‚ïî‚ïê‚ï° 2af7dfc5-a26a-4ad3-a046-31d1dfa107f1
md"""
##### Observa√ß√µes

- Ap√≥s a aplica√ß√£o da fun√ß√£o `dropmissing!`, os 307 valores falantes de `CU` e `LITH` foram removidos com sucesso da tabela de furos `dh`.
"""

# ‚ïî‚ïê‚ï° ee6c8dfa-d8be-4b5a-bfe0-9e1b3f394e9d
md"""
> ‚ö†Ô∏è Caso algo n√£o tenha ficado claro, consulte o [m√≥dulo 3](https://github.com/fnaghetini/intro-to-geostats/blob/main/3-analise_exploratoria.jl).
"""

# ‚ïî‚ïê‚ï° f4bd13d4-70d3-4167-84ff-9d3c7200e143
md"""
## 4. Compositagem

Nesta se√ß√£o, iremos realizar a compositagem com o objetivo de adequar as amostras √† escala de trabalho (hipot√©tica) de 10 metros. Primeiramente, vamos analisar a distribui√ß√£o do comprimento `LENGTH` das amostras brutas (Figura 02)...
"""

# ‚ïî‚ïê‚ï° 41790d87-ce85-461f-a16d-04821a3624bb
begin
	XÃÖ_dh = round(mean(dh.LENGTH), digits=2)
	md_dh = round(median(dh.LENGTH), digits=2)
	
    # Plotagem da distribui√ß√£o do comprimento das amostras brutas
    dh |> @df histogram(:LENGTH,
		                legend = :topleft,
		                label  = false,
		 				color  = :honeydew2,
						alpha  = 0.75,
	                    xlabel = "Suporte (m)",
        				ylabel = "Freq. Absoluta",
	                    title  = "Amostras Brutas")

    # plotagem da m√©dia
    vline!([XÃÖ_dh], label="XÃÖ = $(XÃÖ_dh) m")

    # plotagem da mediana
    vline!([md_dh], label="md = $(md_dh) m")
end

# ‚ïî‚ïê‚ï° f40bca06-6a3e-4807-9857-ff17d21893bc
md"""
**Figura 02:** Distribui√ß√£o do comprimento das amostras brutas.
"""

# ‚ïî‚ïê‚ï° 7ea21049-5edd-4979-9782-8a20d4bb287b
md"""
##### Observa√ß√µes

- Grande parte das amostras apresenta um comprimento igual a 5 metros;
- O suporte das amostras brutas apresenta uma distribui√ß√£o assim√©trica negativa (cauda alongada √† esquerda);
- O comprimento das amostras varia de 2,5 a 5,0 metros.
"""

# ‚ïî‚ïê‚ï° d8ce39f1-8017-4df3-a55d-648bdd3dbc04
md"""
Vamos agora utilizar a fun√ß√£o `composite` para realizar a compositagem das amostras pelo m√©todo do comprimento √≥timo (`mode=:nodiscard`) para um tamanho `interval` de 10 metros...
"""

# ‚ïî‚ïê‚ï° 32f75604-b01a-4a0b-a008-33b2a56f4b57
begin
	# compositagem (comprimento √≥timo) para um intervalo de 10 m
	compostas = composite(drillholes, interval=10.0, mode=:nodiscard)

	# armazenando a tabela de furos compositados na vari√°vel "cp"
	cp = compostas.table
	
	# remo√ß√£o de eventuais valores faltantes
	dropmissing!(cp)
end;

# ‚ïî‚ïê‚ï° b6712822-7c4d-4936-bcc2-21b48be99a66
md"""
Agora, podemos analisar a distribui√ß√£o do suporte das compostas √≥timas (Figura 03)...
"""

# ‚ïî‚ïê‚ï° 87808ab0-3bcb-428d-9ebf-71ffefbcb357
begin
	XÃÖ_cp = round(mean(cp.LENGTH), digits=2)
	md_cp = round(median(cp.LENGTH), digits=2)
	
    # plotagem da distribui√ß√£o do comprimento das compostas √≥timas
    cp |> @df histogram(:LENGTH,
	                    legend = :topleft,
                        label  = false,
                        color  = :honeydew2,
                        alpha  = 0.75,
	                    xlabel = "Suporte (m)",
                        ylabel = "Freq. Absoluta",
		                title  = "Compostas √ìtimas")

    # plotagem da m√©dia
    vline!([XÃÖ_cp], label="XÃÖ = $(XÃÖ_cp) m")

    # plotagem da mediana
    vline!([md_cp], label="md = $(md_cp) m")
end

# ‚ïî‚ïê‚ï° 280db32e-cebf-4d51-bfcb-54d456f2194b
md"""
**Figura 03:** Distribui√ß√£o do comprimento das compostas √≥timas.
"""

# ‚ïî‚ïê‚ï° 893d7d19-878b-4990-80b1-ef030b716048
md"""
##### Observa√ß√µes

- A m√©dia do suporte das compostas √≥timas encontra-se muito pr√≥xima do comprimento pr√©-estabelecido (10 m);
- O suporte das compostas √≥timas passou a apresentar uma distribui√ß√£o aproximadamente sim√©trica.
"""

# ‚ïî‚ïê‚ï° b85a7c2f-37e2-48b0-a1db-984e2e719f29
md"""
Podemos agora realizar uma compara√ß√£o estat√≠stica entre as amostras brutas e as compostas √≥timas a partir da fun√ß√£o `compvalid`. Para isso, iremos avaliar a dispers√£o do comprimento das amostras e a m√©dia do teor de Cu (%).
"""

# ‚ïî‚ïê‚ï° 676bea93-69a9-4f2c-bb3e-759a9d28b12e
function compvalid(amostras::DataFrame, id::String)
	
	report = DataFrame(Amostras   = id,
					   DP_suporte = std(amostras.LENGTH),
					   M√©dia_Au   = mean(amostras.CU))
	return report
end

# ‚ïî‚ïê‚ï° 59dfbb66-f188-49f1-87ba-4f7020c4c031
[compvalid(dh, "Brutas")
 compvalid(cp, "Comp. √ìtimo")]

# ‚ïî‚ïê‚ï° 7a021fbd-83ac-4a36-bb8c-98519e6f8acb
md"""
##### Observa√ß√µes

- Houve uma redu√ß√£o < 1% na m√©dia de Cu;
- Houve um aumento na dispers√£o do comprimento das amostras ap√≥s a compositagem. Poder√≠amos testar outras configura√ß√µes de compositagem, mas seguiremos com essas compostas.
"""

# ‚ïî‚ïê‚ï° fb67daea-0b8b-47da-b06c-8256566f9ba0
md"""
> ‚ö†Ô∏è Caso algo n√£o tenha ficado claro, consulte o [m√≥dulo 2](https://github.com/fnaghetini/intro-to-geostats/blob/main/2-preparacao_de_amostras.jl).
"""

# ‚ïî‚ïê‚ï° f2be5f11-1923-4658-93cf-800ce57c32d3
md"""
## 5. An√°lise explorat√≥ria

Nesta se√ß√£o, iremos conduzir uma an√°lise explorat√≥ria simples, visando descrever principalmente a vari√°vel `CU`.

Primeiramente, vamos calcular sum√°rio estat√≠stico da vari√°vel `CU` e, em seguida, visualizar sua distribui√ß√£o (Figura 04)...
"""

# ‚ïî‚ïê‚ï° ecec08be-b9da-4913-9f5a-3a77631fa96e
function sumario(teor::String, id::String)
	q10 = quantile(cp[!,teor], 0.1)
	q90 = quantile(cp[!,teor], 0.9)
	
	df = DataFrame(teor = id,
                   XÃÑ    = mean(cp[!,teor]),
				   md   = median(cp[!,teor]),
				   min  = minimum(cp[!,teor]),
			       max  = maximum(cp[!,teor]),
                   S¬≤   = var(cp[!,teor]),
				   S    = std(cp[!,teor]),
                   q10  = q10,
				   q90  = q90,
                   C·µ•   = variation(cp[!,teor]),
                   skew = skewness(cp[!,teor]))
				
	return df
end;

# ‚ïî‚ïê‚ï° d00f02fc-3c14-4911-a36b-209c747f96cb
sumario_cu = sumario("CU", "Cu (amostral)")

# ‚ïî‚ïê‚ï° b95a6def-f3e6-4835-b15f-2a48577006f4
begin
	# c√°lculo da m√©dia e mediana
	XÃÖ_cu = round(sumario_cu.XÃÑ[], digits=2)
	md_cu = round(sumario_cu.md[], digits=2)
	
    # plotagem da distribui√ß√£o dos teores compostos de Cu
    cp |> @df histogram(:CU,
		                bins   = 30,
		 				label  = false,
		                color  = :honeydew2,
		                alpha  = 0.75,
		                xlabel = "Cu (%)",
            			ylabel = "Freq. Absoluta")

    # plotagem da m√©dia
    vline!([XÃÖ_cu], label="XÃÑ = $(XÃÖ_cu)%")

    # plotagem da mediana
    vline!([md_cu], label="md = $(md_cu)%")
end

# ‚ïî‚ïê‚ï° 81a5831f-75ef-478b-aba5-70d19306798e
md"""
**Figura 04:** Distribui√ß√£o dos teores compostos de Cu (%).
"""

# ‚ïî‚ïê‚ï° 0808061f-4856-4b82-8560-46a59e669ac4
md"""
##### Observa√ß√µes

- A m√©dia do Cu √© igual a 0,86%;
- O coeficiente de varia√ß√£o do Cu √© de 46% e, portanto, essa vari√°vel √© pouco err√°tica;
- A princ√≠pio, os lowgrades do dep√≥sito correspondem a amostras ‚â§ 0,47%;
- A princ√≠pio, os _high grades_ do dep√≥sito correspondem a amostras > 1,32%;
- Como XÃÖ > P50, Skew > 0 e tem-se cauda alongada √† direita, a distribui√ß√£o dos teores compostos de Cu √© assim√©trica positiva.
"""

# ‚ïî‚ïê‚ï° c0604ed8-766e-4c5d-a628-b156615f8140
md"""
Como estamos lidando com dados geoespaciais, a visualiza√ß√£o espacial da vari√°vel de interesse sempre deve ser realizada em conjunto com a sua descri√ß√£o estat√≠stica.

Nesse sentido, podemos utilizar o pacote [Plots.jl](https://github.com/JuliaPlots/Plots.jl) para visualizar a distribui√ß√£o espacial dos teores de Cu (Figura 05). Utilize os sliders abaixo para analisar os dados por √¢ngulos diferentes...
"""

# ‚ïî‚ïê‚ï° eac8e835-83bc-4f9c-b25b-3aaddcf69611
md"""
**Figura 05:** Distribui√ß√£o espacial dos teores de Cu (%).
"""

# ‚ïî‚ïê‚ï° 8bb2f630-8234-4f7f-a05c-8206993bdd45
md"""

Rota√ß√£o em Z: $(@bind Œ± Slider(0:10:90, default=30, show_value=true))¬∞

Rota√ß√£o em X: $(@bind Œ≤ Slider(0:10:90, default=30, show_value=true))¬∞

"""

# ‚ïî‚ïê‚ï° 074bff0b-6b41-4bbc-9b5c-77fbf62c4dc6
# Visualiza√ß√£o dos furos por teor de Cu
cp |> @df scatter(:X, :Y, :Z,
	              marker_z = :CU,
	              marker   = (:circle, 4),
	              colorbar = true,
	              color    = :jet,
                  xlabel   = "X",
	              ylabel   = "Y",
	              zlabel   = "Z",
	              label    = "Teor de Cu (%)",
                  camera   = (Œ±, Œ≤))

# ‚ïî‚ïê‚ï° 862dd0cf-69ae-48e7-92fb-ff433f62e67c
md"""
Podemos, ainda, visualizar os *highgrades* e *lowgrades* de Cu (Figura 06). Como n√£o temos muito conhecimento sobre o dep√≥sito, adotaremos a seguinte conven√ß√£o:
- `lowgrades`: Cu (%) ‚â§ P10
- `highgrades`: Cu (%) > P90

Utilize os sliders acima para analisar esses teores por √¢ngulos diferentes...
"""

# ‚ïî‚ïê‚ï° 52c28a55-3a4a-4df3-841a-ab8fc748bf55
md"""
**Figura 06:** Distribui√ß√£o espacial dos highgrades e lowgrades de Cu (%).
"""

# ‚ïî‚ïê‚ï° 3ae99e49-6996-4b4a-b930-f6073994f25c
begin	
    # filtragem dos teores lowgrade
    lg = cp |> @filter(_.CU ‚â§ sumario_cu.q10[])
	
	# filtragem dos teores highgrade
    hg = cp |> @filter(_.CU > sumario_cu.q90[])
end;

# ‚ïî‚ïê‚ï° ea0968ca-a997-40c6-a085-34b3aa89807e
begin

    # Visualiza√ß√£o de todas as amostras (cinza claro)
    @df cp scatter(:X, :Y, :Z,
		           marker = (:circle, 4, :gray95, 0.5),
		           label  = false,
		           xlabel = "X",
                   ylabel = "Y",
		           zlabel = "Z",
	               camera = (Œ±, Œ≤))
	
	# Visualiza√ß√£o de lowgrades (azul)
    @df lg scatter!(:X, :Y, :Z,
		            marker=(:circle, 4, :blue),
		            label="lowgrades")
    
    # Visualiza√ß√£o de highgrades (vermelho)
    @df hg scatter!(:X, :Y, :Z,
		            marker=(:circle, 4, :red),
		            label="highgrades")

end

# ‚ïî‚ïê‚ï° ccbcf57e-d00b-43df-8555-eee8bf4f9e6f
md"""
##### Observa√ß√µes

- Os *highgrades* ocorrem em regi√µes de maior densidade amostral;
- Os *low grades* tendem a se concentrar em por√ß√µes de densidade amostral baixa;
- As amostras apresentam-se ligeiramente agrupadas na por√ß√£o sudeste do dep√≥sito.
"""

# ‚ïî‚ïê‚ï° c6c41764-509c-4f40-b063-a5f85dcc16db
md"""
> ‚ö†Ô∏è Caso algo n√£o tenha ficado claro, consulte o [m√≥dulo 3](https://github.com/fnaghetini/intro-to-geostats/blob/main/3-analise_exploratoria.jl).
"""

# ‚ïî‚ïê‚ï° 3c2eb77b-60e9-4aeb-9d19-ba22293741f9
md"""
## 6. Desagrupamento

Antes de calcularmos as estat√≠sticas desagrupadas, devemos georreferenciar os dados, utilizando a fun√ß√£o `georef`...
"""

# ‚ïî‚ïê‚ï° 63b75ae2-8dca-40e3-afe0-68c6a639f54e
samples = georef(cp, (:X,:Y,:Z))

# ‚ïî‚ïê‚ï° 5699c563-d6cb-4bc2-8063-e1be00722a41
md"""
Com os dados georreferenciados, podemos calcular as estat√≠sticas desagrupadas do Cu (%). Utilize o slider abaixo para configurar o tamanho do bloco de desagrupamento... 
"""

# ‚ïî‚ïê‚ï° 16cb8eaa-773e-4a42-ae8d-00bebddedc59
md"""
Tamanho de bloco: $(@bind s Slider(50.:10.:250., default=230., show_value=true)) m
"""

# ‚ïî‚ïê‚ï° af160a03-10ea-404e-87a3-e6417058449f
begin
	# Sum√°rio estat√≠stico do Cu clusterizado
	Cu_clus = sumario_cu[:,[:teor,:XÃÑ,:S¬≤,:q10,:md,:q90]]
	
	# Sum√°rio estat√≠stico do Cu declusterizado
	Cu_decl = DataFrame(teor = "Cu (desagrupado)",
						XÃÑ    = mean(samples, :CU, s),
						S¬≤   = var(samples, :CU, s),
						q10  = quantile(samples, :CU, 0.1, s),
						md   = quantile(samples, :CU, 0.5, s),
						q90  = quantile(samples, :CU, 0.9, s))
	
	# Raz√£o das m√©dias (%)
	X·µ£ = (Cu_decl.XÃÑ / Cu_clus.XÃÑ)[] * 100
	
	# Concatena√ß√£o dos sum√°rios
	[Cu_clus
     Cu_decl]
end

# ‚ïî‚ïê‚ï° 161cc157-9667-48b5-8832-586c4bb0c476
md"""
##### Observa√ß√µes

- A m√©dia declusterizada representa $(round(X·µ£, digits=2))% da m√©dia original. Ou seja, h√° uma diferen√ßa de $(round((100-X·µ£), digits=2))% de Cu entre a m√©dia original e a m√©dia declusterizada;
- Utilizaremos essas estat√≠sticas desagrupadas mais tarde, durante a valida√ß√£o das estimativas.
"""

# ‚ïî‚ïê‚ï° 6ec16d83-d8fb-45d0-a7f8-d75f712b4c91
md"""
> ‚ö†Ô∏è Caso algo n√£o tenha ficado claro, consulte o [m√≥dulo 3](https://github.com/fnaghetini/intro-to-geostats/blob/main/3-analise_exploratoria.jl).
"""

# ‚ïî‚ïê‚ï° b02263dc-280a-40b4-be1e-9c3b6873e153
md"""

## 7. Variografia

Durante o [m√≥dulo 4](https://github.com/fnaghetini/intro-to-geostats/blob/main/4-variografia.jl) tivemos uma breve introdu√ß√£o √† variografia, com exemplos 2D. Neste m√≥dulo, entretanto, lidaremos com dados de sondagem 3D. Nesse sentido, adotaremos o fluxo de trabalho a seguir. Em cada etapa, listamos os principais par√¢metros encontrados:

1. **Variograma down hole:**
    - Efeito pepita e as contribui√ß√µes das estruturas.
2. **Variograma azimute:**
    - Azimute de maior continuidade;
    - Primeira rota√ß√£o do variograma (eixo Z).
3. **Variograma prim√°rio:**
    - Dip de maior continuidade, fixando-se o azimute;
    - Segunda rota√ß√£o do variograma (eixo X);
    - Alcance da dire√ß√£o (azimute + dip) de maior continuidade (Y).
4. **Variogramas secund√°rio e terci√°rio:**
    - Terceira rota√ß√£o do variograma (eixo Y);
    - Alcance da dire√ß√£o de continuidade intermedi√°ria (X);
    - Alcance da dire√ß√£o de menor continuidade (Z).
"""

# ‚ïî‚ïê‚ï° 6d520cfe-aa7b-4083-b2bf-b34f840c0a75
md"""
### 1. Variograma down hole

Primeiramente, iremos calcular o **variograma experimental down hole**, com o intuito de se obter o *efeito pepita* e o valor de *contribui√ß√£o por estrutura*.

> ‚ö†Ô∏è Esses par√¢metros ser√£o utilizados na modelagem de todos os variogramas experimentais que ser√£o calculados adiante!
"""

# ‚ïî‚ïê‚ï° 289865a9-906f-46f4-9faa-f62feebbc92a
md"""
Como o variograma down hole √© calculado ao longo da orienta√ß√£o dos furos, devemos avaliar as estat√≠sticas das vari√°veis `AZM` (azimute) e `DIP` (mergulho) pertencentes √† tabela de perfilagem:
"""

# ‚ïî‚ïê‚ï° 1db51803-8dc4-4db6-80a1-35a489b6fb9e
begin
	
	# sum√°rio estat√≠stico da vari√°vel "AZM"
	azmdf = DataFrame(Variable = "Azimute",
                      Mean     = mean(compostas.trace.AZM),
					  Median   = median(compostas.trace.AZM),
					  Min      = minimum(compostas.trace.AZM),
					  Max      = maximum(compostas.trace.AZM))
	
	# sum√°rio estat√≠stico da vari√°vel "DIP"
	dipdf = DataFrame(Variable = "Dip",
                      Mean     = mean(compostas.trace.DIP),
					  Median   = median(compostas.trace.DIP),
					  Min      = minimum(compostas.trace.DIP),
					  Max      = maximum(compostas.trace.DIP))
	
	# azimute e dip m√©dios
	Œºazi = round(azmdf.Mean[], digits=2)
	Œºdip = round(dipdf.Mean[], digits=2)
	
	# concatena√ß√£o vertical dos sum√°rios
	[azmdf
	 dipdf]

end

# ‚ïî‚ïê‚ï° e49b7b48-77d8-4abf-a5df-70e9c65e3667
begin
	# converte coordenadas esf√©ricas para cartesianas
	function sph2cart(azi, dip)
		Œ∏, œï = deg2rad(azi), deg2rad(dip)
		sin(Œ∏)*cos(œï), cos(Œ∏)*cos(œï), -sin(œï)
	end
	
	# converte coordenadas cartesianas para esf√©ricas
	function cart2sph(x, y, z)
		Œ∏, œï = atan(x, y), atan(z, ‚àö(x^2 + y^2))
		rad2deg(Œ∏), rad2deg(œï)
	end
		
	# Direc√£o ao longo dos furos
	dirdh = sph2cart(Œºazi, Œºdip)
end;

# ‚ïî‚ïê‚ï° a717d5d3-9f4e-4a2d-8e32-f0605bbd742f
md"""
Agora que sabemos a orienta√ß√£o m√©dia dos furos ($(round(Œºazi,digits=2))¬∞/ $(round(Œºdip,digits=2))¬∞), podemos calcular o variograma experimental down hole (Figura 07). Utilize os sliders abaixos para configurar os par√¢metros necess√°rios...
"""

# ‚ïî‚ïê‚ï° 8348abd3-27f6-4161-bd04-c4be6a644888
md"""
**Figura 07:** Variograma experimental downhole.
"""

# ‚ïî‚ïê‚ï° 1465f010-c6a7-4e72-9842-4504c6dda0be
md"""
N√∫mero de passos: $(@bind nlagsdh Slider(5:1:30, default=11, show_value=true))

Largura da banda: $(@bind toldh Slider(10:5:50, default=45, show_value=true)) m
"""

# ‚ïî‚ïê‚ï° ffe3700c-262f-4949-b910-53cbe1dd597b
begin
	# semente aleat√≥ria
	Random.seed!(1234)
	
	# cor para variogramas down hole
	colordh = :brown

	# c√°lculo variograma down hole para a vari√°vel Cu
	gdh = DirectionalVariogram(dirdh, samples, :CU,
		                       maxlag=150, nlags=nlagsdh, dtol=toldh)
	
	# vari√¢ncia a priori
	œÉ¬≤ = var(samples[:CU])
	
	# plotagem do variograma experimental downhole
    plot(gdh, ylims=(0, œÉ¬≤+0.05), color=colordh, ms=5,
		 legend=:bottomright, label=false, title="")
	
	# linha horizontal tracejada cinza (vari√¢ncia √† priori)
    hline!([œÉ¬≤], color=:gray, label="œÉ¬≤")

end

# ‚ïî‚ïê‚ï° 0b46230a-b305-4840-aaad-e985444cf54e
md"""
Com o variograma down hole calculado, podemos ajust√°-lo com um modelo te√≥rico conhecido. Utilize os sliders abaixo para encontrar o melhor ajuste para esse variograma experimental (Figura 08)...
"""

# ‚ïî‚ïê‚ï° fc2ea8f3-064a-4d6d-8115-236c8160cc23
md"""
**Figura 08:** Ajuste te√≥rico ao variograma experimental downhole.
"""

# ‚ïî‚ïê‚ï° 0585add6-1320-4a31-a318-0c40b7a444fa
md"""
Efeito pepita: $(@bind c‚Çí Slider(0.00:0.005:0.06, default=0.025, show_value=true))

Contribui√ß√£o 1¬™ estrutura: $(@bind c‚ÇÅ Slider(0.045:0.005:0.18, default=0.055, show_value=true))

Contribui√ß√£o 2¬™ estrutura: $(@bind c‚ÇÇ Slider(0.045:0.005:0.18, default=0.065, show_value=true))

Alcance 1¬™ estrutura: $(@bind rdh‚ÇÅ Slider(10.0:2.0:140.0, default=110.0, show_value=true)) m

Alcance 2¬™ estrutura: $(@bind rdh‚ÇÇ Slider(10.0:2.0:140.0, default=110.0, show_value=true)) m
"""

# ‚ïî‚ïê‚ï° c6d0a87e-a09f-4e78-9672-c858b488fd39
begin

    # cria√ß√£o da primeira estrutura do modelo de variograma (efeito pepita)
    Œ≥dh‚Çí = NuggetEffect(nugget=Float64(c‚Çí))

    # cria√ß√£o da segunda estrutura do modelo de variograma (1¬™ contribui√ß√£o ao sill)
    Œ≥dh‚ÇÅ = SphericalVariogram(sill=Float64(c‚ÇÅ), range=Float64(rdh‚ÇÅ))

    # cria√ß√£o da terceira estrutura do modelo de variograma (2¬™ contribui√ß√£o ao sill)
    Œ≥dh‚ÇÇ = SphericalVariogram(sill=Float64(c‚ÇÇ), range=Float64(rdh‚ÇÇ))

    # aninhamento das tr√™s estruturas
    Œ≥dh  = Œ≥dh‚Çí + Œ≥dh‚ÇÅ + Œ≥dh‚ÇÇ

    # plotagem do variograma experimental downhole
    plot(gdh, color=colordh, ms=5, label=false,
		 legend=:bottomright, title="Variograma Down Hole")

    # plotagem do modelo de variograma aninhado
    plot!(Œ≥dh, 0, 150, ylims=(0, œÉ¬≤+0.05), color=colordh,
		  lw=2, label=false)
    
    # linha horizontal tracejada cinza (vari√¢ncia √† priori)
    hline!([œÉ¬≤], color=:gray, label="œÉ¬≤")
    
    # linha vertical tracejada cinza (alcance)
    vline!([range(Œ≥dh)], color=colordh, ls=:dash, primary=false)

end

# ‚ïî‚ïê‚ï° 09d95ff8-3ba7-4031-946b-8ba768dae5d5
md"""
### 2. Variograma azimute

O pr√≥ximo passo √© o c√°lculo do **variograma experimental do azimute de maior continuidade**. Nesta etapa, obteremos a *primeira rota√ß√£o* do variograma.

> ‚ö†Ô∏è A primeira rota√ß√£o do variograma ocorre em torno do eixo Z.

Calcularemos diversos variogramas experimentais ortogonais entre si e escolheremos aquele que apresentar maior continuidade/alcance (Figura 09).

Utilize o slider `Azimute` para definir o azimute de c√°lculo. Automaticamente, o variograma de dire√ß√£o perpendicular √†quela definida tamb√©m ser√° calculado. Utilize os demais sliders para configurar os par√¢metros restantes...

> ‚ö†Ô∏è Normalmente, o variograma de menor continuidade √© perpendicular ao variograma de maior alcance. Utilize essa informa√ß√£o para selecionar a dire√ß√£o mais cont√≠nua.
"""

# ‚ïî‚ïê‚ï° bda3cda3-9d57-495b-be79-1415aa95707f
md"""
**Figura 09:** Variogramas experimentais de azimutes de maior e menor continuidade.
"""

# ‚ïî‚ïê‚ï° 17b21a63-9fa6-4975-9302-5465cdd3d2fa
md"""
Azimute: $(@bind azi Slider(0.0:22.5:67.5, default=67.5, show_value=true)) ¬∞

N√∫mero de passos: $(@bind nlagsazi Slider(5:1:20, default=8, show_value=true))

Largura de banda: $(@bind dtolazi Slider(10:10:100, default=70, show_value=true)) m

"""

# ‚ïî‚ïê‚ï° d07a57c3-0a7a-49c2-a840-568e72d50545
begin

    Random.seed!(1234)
	
	colorazi‚Çê = :green
	colorazi·µ¶ = :purple

    gazi‚Çê = DirectionalVariogram(sph2cart(azi, 0), samples, :CU,
                                 maxlag = 350, nlags = nlagsazi, dtol = dtolazi)

    gazi·µ¶ = DirectionalVariogram(sph2cart((azi+90), 0), samples, :CU,
		                         maxlag = 350, nlags = nlagsazi, dtol = dtolazi)
	
	plot(gazi‚Çê, ylims=(0, œÉ¬≤+0.05), color = colorazi‚Çê, ms = 5,
		 legend = :bottomright, label="$azi ¬∞")

    plot!(gazi·µ¶, color = colorazi·µ¶, ms = 5, label="$(azi+90) ¬∞")

    hline!([œÉ¬≤], color = :gray, label="œÉ¬≤")

end

# ‚ïî‚ïê‚ï° 9389a6f4-8710-44c3-8a56-804017b6239b
md"""
‚úîÔ∏è Agora sabemos que a *primeira rota√ß√£o do variograma √© igual a $(azi)*. Utilizaremos essa informa√ß√£o mais a frente para a cria√ß√£o do elipsoide de anisotropia.
"""

# ‚ïî‚ïê‚ï° 99baafe5-6249-4eda-845f-d7f6219d5726
# Cores dos variograms principais
colorpri, colorsec, colorter = :red, :green, :blue;

# ‚ïî‚ïê‚ï° 294ac892-8952-49bc-a063-3d290c375ea5
md"""
### 3. Variograma prim√°rio

Agora, calcularemos o **variograma experimental prim√°rio**, ou seja, aquele que representa a *dire√ß√£o (azimute/mergulho) de maior continuidade*.

Nesta etapa, devemos encontrar o *maior alcance* do modelo de variograma final, al√©m da *segunda rota√ß√£o do variograma*.

> ‚ö†Ô∏è A segunda rota√ß√£o do variograma ocorre em torno do eixo X.

Para o c√°lculo deste variograma experimental, devemos fixar o azimute de maior continuidade j√° encontrado ($azi ¬∞) e variar o mergulho. A orienta√ß√£o (azimute/mergulho) que fornecer o maior alcance, ser√° eleita a *dire√ß√£o de maior continuidade* (Figura 10).

Utilize o slider `Mergulho` para definir o mergulho de c√°lculo e os outros para configurar os demais par√¢metros...
"""

# ‚ïî‚ïê‚ï° 774f8e10-fd10-4b16-abcf-20579f174f8a
md"""
**Figura 10:** Variograma experimental prim√°rio.
"""

# ‚ïî‚ïê‚ï° 97670210-2c91-4be7-a607-0da83cb16f44
md"""

Mergulho: $(@bind dip Slider(0.0:22.5:90.0, default=22.5, show_value=true))¬∞

N√∫mero de passos: $(@bind nlagspri Slider(5:1:20, default=8, show_value=true))

Largura de banda: $(@bind tolpri Slider(10:10:100, default=70, show_value=true)) m

"""

# ‚ïî‚ïê‚ï° 668da8c2-2db6-4812-90ce-86b17b289cc6
begin
	
    Random.seed!(1234)

    gpri = DirectionalVariogram(sph2cart(azi, dip), samples, :CU,
                                maxlag = 350, nlags = nlagspri, dtol = tolpri)

	plot(gpri, ylims=(0, œÉ¬≤+0.05), color = colorpri, ms = 5,
		 legend = :bottomright, label=false, title="$azi ¬∞ / $dip ¬∞")

    hline!([œÉ¬≤], color = :gray, label="œÉ¬≤")
end

# ‚ïî‚ïê‚ï° eb9ebce2-7476-4f44-ad4f-10a1ca522143
md"""
Agora que o variograma prim√°rio foi calculado, podemos utilizar os sliders abaixo para ajust√°-lo com um modelo te√≥rico conhecido (Figura 11)...
"""

# ‚ïî‚ïê‚ï° 24981600-3336-4295-b567-8f05785b9346
md"""
**Figura 11:** Ajuste te√≥rico ao variograma experimental prim√°rio.
"""

# ‚ïî‚ïê‚ï° 92d11f3b-c8be-4701-8576-704b73d1b619
md"""

Alcance 1¬™ estrutura: $(@bind rpri‚ÇÅ Slider(10.0:2.0:300.0, default=84.0, show_value=true)) m

Alcance 2¬™ estrutura: $(@bind rpri‚ÇÇ Slider(10.0:2.0:300.0, default=190.0, show_value=true)) m

"""

# ‚ïî‚ïê‚ï° fa93796d-7bc0-4391-89a7-eeb63e1a3838
begin

    Œ≥pri‚Çí = NuggetEffect(nugget = Float64(c‚Çí))

    Œ≥pri‚ÇÅ = SphericalVariogram(sill = Float64(c‚ÇÅ), range = Float64(rpri‚ÇÅ))

    Œ≥pri‚ÇÇ = SphericalVariogram(sill = Float64(c‚ÇÇ), range = Float64(rpri‚ÇÇ))

    Œ≥pri  = Œ≥pri‚Çí + Œ≥pri‚ÇÅ + Œ≥pri‚ÇÇ

    plot(gpri, color = colorpri, ms = 5,
	     legend = :bottomright, label = "prim√°rio", title = "$azi ¬∞/ $dip ¬∞")

    plot!(Œ≥pri, 0, 350, ylims = (0, œÉ¬≤+0.05), color = colorpri, lw = 2,
		  label = "te√≥rico")
		
    hline!([œÉ¬≤], color = :gray, label="œÉ¬≤")

    vline!([range(Œ≥pri)], color = colorpri, ls = :dash, primary = false)

end

# ‚ïî‚ïê‚ï° 55373bb0-6953-4c6f-b1dd-2dacac90b6cc
md"""
‚úîÔ∏è Agora sabemos que a *segunda rota√ß√£o do variograma √© igual a $dip ¬∞*. Al√©m disso, tamb√©m encontramos os *alcances do eixo prim√°rio* do variograma.
"""

# ‚ïî‚ïê‚ï° 6c048b83-d12c-4ce8-9e9a-b89bf3ef7638
md"""

### 4. Variogramas secund√°rio e terci√°rio

Por defini√ß√£o, os tr√™s eixos principais do variograma s√£o ortogonais entre si. Agora que encontramos a *dire√ß√£o de maior continuidade do variograma (eixo prim√°rio)*, sabemos que os outros dois eixos (secund√°rio e terci√°rio) pertencem a um plano cuja normal √© o pr√≥prio eixo prim√°rio!

Portanto, nesta etapa, encontraremos os *alcances intermedi√°rio e menor* do modelo de variograma final, bem como a *terceira rota√ß√£o do variograma (rake)*.

> ‚ö†Ô∏è A terceira rota√ß√£o do variograma ocorre em torno do eixo Y.

Como o eixo prim√°rio do variograma apresenta uma orienta√ß√£o $(azi)¬∞ / $(dip)¬∞, podemos encontrar o plano que cont√©m os eixos secund√°rio e terci√°rio. Ressalta-se ainda que *eixos secund√°rio e terci√°rio s√£o ortogonais entre si*.

> ‚ö†Ô∏è Iremos adotar a seguinte conven√ß√£o de eixos:
>- Eixo prim√°rio (maior continuidade) = Y;
>- Eixo secund√°rio (continuidade intermedi√°ria) = X;
>- Eixo terci√°rio (menor continuidade) = Z.

Para o c√°lculo dos variogramas experimentais secund√°rio e terci√°rio, escolheremos duas dire√ß√µes para serem eleitas as *dire√ß√µes secund√°ria e terci√°ria* do modelo de variograma (Figura 12).

Utilize o slider `Rake` para definir as dire√ß√µes de c√°lculo dos variogramas secund√°rio e terci√°rio. Utilize os demais sliders para configurar os outros par√¢metros...
"""

# ‚ïî‚ïê‚ï° a92f702d-8859-4f95-b676-36deab03e717
md"""
**Figura 12:** Variogramas experimentais secund√°rio e terci√°rio.
"""

# ‚ïî‚ïê‚ï° 120f4a9c-2ca6-49f1-8abc-999bcc559149
md"""

Rake: $(@bind Œ∏ Slider(range(0, stop=90-180/8, step=180/8), default=45, show_value=true))¬∞

N√∫mero de passos: $(@bind nlagssec Slider(5:1:20, default=11, show_value=true))

Largura de banda: $(@bind tolsec Slider(10:10:100, default=70, show_value=true)) m

"""

# ‚ïî‚ïê‚ï° 0def0326-55ef-45db-855e-a9a683b2a76d
begin

    Random.seed!(1234)

	# Encontra vetores u e v perpendiculares entre si e perpendiculares a normal
	n = Vec(sph2cart(azi,dip))
	u = Vec(sph2cart(azi+90,0))
	v = n √ó u
	
	# Giro no plano perpendicular gerado por u e v
	dirsec = cos(deg2rad(Œ∏)) .* u .+ sin(deg2rad(Œ∏)) .* v
	dirter = cos(deg2rad(Œ∏+90)) .* u .+ sin(deg2rad(Œ∏+90)) .* v

	# Variograma secund√°rio
    gsec = DirectionalVariogram(dirsec, samples, :CU,
		                        maxlag = 250, nlags = nlagssec, dtol = tolsec)

	# Variograma terci√°rio
    gter = DirectionalVariogram(dirter, samples, :CU,
								maxlag = 250, nlags = nlagssec, dtol = tolsec)
	
	plot(gsec, ylims=(0, œÉ¬≤+0.2), color = colorsec, ms = 5,
		 legend = :bottomright, label = "secund√°rio")

    plot!(gter, color = colorter, ms = 5, label = "terci√°rio")

    hline!([œÉ¬≤], color = :gray, label="œÉ¬≤")

end

# ‚ïî‚ïê‚ï° 34b9b30f-615d-43ff-8d07-ed757cd69a7f
md"""
‚úîÔ∏è Agora sabemos que a *terceira rota√ß√£o do variograma √© igual a $Œ∏ ¬∞*.

Como j√° elegemos o variograma experimental representante do eixo secund√°rio, podemos utilizar os sliders abaixo para model√°-lo (Figura 13)...
"""

# ‚ïî‚ïê‚ï° b19e5ac0-21fd-4dcd-ac61-a36a67ee80dd
md"""
**Figura 13:** Ajuste te√≥rico ao variograma experimental secund√°rio.
"""

# ‚ïî‚ïê‚ï° 922d81f3-0836-4b14-aaf2-83be903c8642
md"""

Alcance 1¬™ estrutura: $(@bind rsec‚ÇÅ Slider(10.0:2.0:200.0, default=60.0, show_value=true)) m

Alcance 2¬™ estrutura: $(@bind rsec‚ÇÇ Slider(10.0:2.0:200.0, default=84.0, show_value=true)) m

"""

# ‚ïî‚ïê‚ï° a74b7c50-4d31-4bd3-a1ef-6869abf73185
begin

    Œ≥sec‚Çí = NuggetEffect(Float64(c‚Çí))
	
    Œ≥sec‚ÇÅ = SphericalVariogram(sill = Float64(c‚ÇÅ), range = Float64(rsec‚ÇÅ))

    Œ≥sec‚ÇÇ = SphericalVariogram(sill = Float64(c‚ÇÇ), range = Float64(rsec‚ÇÇ))

    Œ≥sec  = Œ≥sec‚Çí + Œ≥sec‚ÇÅ + Œ≥sec‚ÇÇ

    plot(gsec, color = colorsec, ms = 5,
	     label = false, legend = :bottomright)

    plot!(Œ≥sec, 0, 250, ylims = (0, œÉ¬≤+0.2), color = colorsec, lw = 2,
	      label = false)

    hline!([œÉ¬≤], color = :gray, label="œÉ¬≤")

    vline!([range(Œ≥sec)], color = colorsec, ls = :dash, primary = false)

end

# ‚ïî‚ïê‚ï° fed7dbb1-8dfd-4242-a060-7b44508ce432
md"""
‚úîÔ∏è Agora encontramos os *alcances do eixo secund√°rio* do variograma.

Finalmente, podemos tamb√©m utilizar os sliders abaixo para modelar o variograma terci√°rio (Figura 14)...
"""

# ‚ïî‚ïê‚ï° 33ba8a9b-f548-4984-8a31-1c381b31ced4
md"""
**Figura 14:** Ajuste te√≥rico ao variograma experimental terci√°rio.
"""

# ‚ïî‚ïê‚ï° dacfe446-3c19-430d-8f5f-f276a022791f
md"""

Alcance 1¬™ Estrutura: $(@bind rter‚ÇÅ Slider(10.0:2.0:200.0, default=58.0, show_value=true)) m

Alcance 2¬™ Estrutura: $(@bind rter‚ÇÇ Slider(10.0:2.0:200.0, default=62.0, show_value=true)) m

"""


# ‚ïî‚ïê‚ï° 0927d78e-9b50-4aaf-a93c-69578608a4f8
begin

    Œ≥ter‚Çí = NuggetEffect(Float64(c‚Çí))

    Œ≥ter‚ÇÅ = SphericalVariogram(sill = Float64(c‚ÇÅ), range = Float64(rter‚ÇÅ))

    Œ≥ter‚ÇÇ = SphericalVariogram(sill = Float64(c‚ÇÇ), range = Float64(rter‚ÇÇ))

    Œ≥ter  = Œ≥ter‚Çí + Œ≥ter‚ÇÅ + Œ≥ter‚ÇÇ

    plot(gter, color = colorter, ms = 5, label = false,
	     legend = :bottomright)

    plot!(Œ≥ter, 0, 250, ylims = (0, œÉ¬≤+0.2), color = colorter, lw = 2,
		  label = false)

    hline!([œÉ¬≤], color = :gray, label="œÉ¬≤")

    vline!([range(Œ≥ter)], color = colorter, ls = :dash, primary = false)

end

# ‚ïî‚ïê‚ï° 38946a3f-d5a6-4a1c-a1d5-d4ec475f1545
md"""
‚úîÔ∏è Agora encontramos os *alcances do eixo terci√°rio* do variograma.
"""

# ‚ïî‚ïê‚ï° 483487c6-acf8-4551-8357-2e69e6ff44ff
md"""
### Modelo de variograma final

Agora que temos as tr√™s dire√ß√µes principais do modelo de variograma, podemos sumarizar as informa√ß√µes obtidas nos passos anteriores na tabela abaixo. A Figura 15 √© a representa√ß√£o gr√°fica da informa√ß√£o contida nessa tabela.

| Estrutura | Modelo | Alcance em Y | Alcance em X | Alcance em Z | Contribui√ß√£o | Efeito Pepita |
|:---:|:--------:|:--------:|:--------:|:--------:|:---:|:---:|
|  0  |     -    |    -     |    -     |    -     |  -  | $c‚Çí |
|  1  | Esf√©rico |  $rpri‚ÇÅ  |  $rsec‚ÇÅ  |  $rter‚ÇÅ  | $c‚ÇÅ |  -  |
|  2  | Esf√©rico |  $rpri‚ÇÇ  |  $rsec‚ÇÇ  |  $rter‚ÇÇ  | $c‚ÇÇ |  -  |

"""

# ‚ïî‚ïê‚ï° c9ac9fb4-5d03-43c9-833e-733e48565946
begin
    plot(Œ≥pri, color=colorpri, lw=2, label="prim√°rio",
		 legend=:bottomright, title="")

    plot!(Œ≥sec, color=colorsec, lw=2, label="secund√°rio")

    plot!(Œ≥ter, 0, range(Œ≥pri)+10, color=colorter, lw=2, label="terci√°rio",
		  ylims=(0, œÉ¬≤+0.05))
	
	hline!([œÉ¬≤], color=:gray, label="œÉ¬≤")
end

# ‚ïî‚ïê‚ï° 5134e2cb-8c98-4e5e-9f13-722b8f828dc7
md"""
**Figura 15:** Modelo de variograma 3D anisotr√≥pico.
"""

# ‚ïî‚ïê‚ï° d700e40b-dd7f-4630-a29f-f27773000597
md"""
Al√©m das informa√ß√µes sumarizadas acima, devemos escolher uma conven√ß√£o de rota√ß√£o que, por sua vez, √© utilizada para definir a orienta√ß√£o do elipsoide de anisotropia no espa√ßo.

A conven√ß√£o de rota√ß√£o que iremos adotar √© a do cl√°ssico software **GSLIB**. Portanto, as rota√ß√µes do do elipsoide de anisotropia ser√£o:

| Rota√ß√£o | Eixo |   √Çngulo   |
|:-------:|:----:|:----------:|
|    1¬™   |   Z  |  $(azi)¬∞   |
|    2¬™   |   X  |  $(-dip)¬∞  |
|    3¬™   |   Y  |  $(-Œ∏)¬∞    |

> ‚ö†Ô∏è Caso queira entender melhor a conven√ß√£o de rota√ß√£o GSLIB, consulte [Deutsch (2015)](https://geostatisticslessons.com/lessons/anglespecification).

O elipsoide de anisotropia nada mais √© do que uma representa√ß√£o do modelo de variograma que utilizaremos como entrada no sistema linear de Krigagem. Os eixos desse elipsoide representam os alcances (do variograma) e a orienta√ß√£o dessa geometria √© definida pelas tr√™s rota√ß√µes. Sabendo disso, podemos construir o modelo de variograma final...
"""

# ‚ïî‚ïê‚ï° 38d15817-f3f2-496b-9d83-7dc55f4276dc
begin
	# elipsoides de anisotropia para cada estrutura
	ellipsoid‚ÇÅ = Ellipsoid([rpri‚ÇÅ, rsec‚ÇÅ, rter‚ÇÅ], [azi, -dip, -Œ∏], convention=GSLIB)
    ellipsoid‚ÇÇ = Ellipsoid([rpri‚ÇÇ, rsec‚ÇÇ, rter‚ÇÇ], [azi, -dip, -Œ∏], convention=GSLIB)

	# estruturas do variograma final
	Œ≥‚Çí = NuggetEffect(nugget=Float64(c‚Çí))
	
    Œ≥‚ÇÅ = SphericalVariogram(sill=Float64(c‚ÇÅ), distance=metric(ellipsoid‚ÇÅ))
	
    Œ≥‚ÇÇ = SphericalVariogram(sill=Float64(c‚ÇÇ), distance=metric(ellipsoid‚ÇÇ))

	# aninhamento das estruturas e obten√ß√£o do modelo de variograma final
    Œ≥ = Œ≥‚Çí + Œ≥‚ÇÅ + Œ≥‚ÇÇ
end;

# ‚ïî‚ïê‚ï° b2156251-26ae-4b1d-8757-ffdf3a02a2f8
md"""
>üèÜ Finalmente encontramos o modelo de variograma final $\gamma$, que ser√° utilizado como entrada durante a estima√ß√£o por Krigagem.
"""

# ‚ïî‚ïê‚ï° 51f8bc33-a24f-4ce4-a81b-cd22fb8312ec
md"""
> ‚ö†Ô∏è Caso algo n√£o tenha ficado claro, consulte o [m√≥dulo 4](https://github.com/fnaghetini/intro-to-geostats/blob/main/4-variografia.jl).
"""

# ‚ïî‚ïê‚ï° 9baefd13-4c16-404f-ba34-5982497e8da6
md"""
## 8. Estima√ß√£o

Nesta se√ß√£o, seguiremos o fluxo de trabalho do [GeoStats.jl](https://juliaearth.github.io/GeoStats.jl/stable/index.html#Quick-example), anteriormente apresentado no [m√≥dulo 5]():

- **Etapa 1:** Cria√ß√£o do dom√≠nio de estimativas;
- **Etapa 2:** Defini√ß√£o do problema de estima√ß√£o;
- **Etapa 3:** Defini√ß√£o do estimador;
- **Etapa 4:** Solu√ß√£o do problema de estima√ß√£o.
"""

# ‚ïî‚ïê‚ï° a7a59395-59ec-442a-b4b6-7db55d150d53
md"""

### Etapa 1: Cria√ß√£o do dom√≠nio de estimativas

Nesta primeira etapa, delimitaremos o dom√≠nio de estimativas. No contexto de estimativa de recursos minerais, esse dom√≠nio √© chamado de **modelo de blocos**.

> ‚ö†Ô∏è O modelo de blocos √© o modelo geol√≥gico 3D discretizado em unidades volum√©tricas menores (i.e. blocos). Em outras palavras, trata-se do modelo geol√≥gico constitu√≠do por "tijolos".

Para definir o modelo de blocos, devemos configurar tr√™s par√¢metros:

- Ponto de origem do modelo de blocos;
- Ponto de t√©rmino do modelo de blocos;
- N√∫mero de blocos nas dire√ß√µes X, Y e Z.

Faremos algumas manipula√ß√µes e, em seguida, utilizaremos a fun√ß√£o `CartesianGrid` para criar o modelo de blocos, cujas dimens√µes dos blocos ser√£o `20 m x 20 m x 10 m` (Figura 16)...
"""

# ‚ïî‚ïê‚ï° f7cee6a3-5ac2-44ff-9d5e-58ede7327c46
begin
	# caixa delimitadora das amostras
    bbox = boundingbox(samples)
	
	# lados da caixa delimitadora
	extent = maximum(bbox) - minimum(bbox)
	
	# tamanho dos blocos em cada dire√ß√£o (metros)
	blocksizes = (20., 20., 10.)
	
	# n√∫mero de blocos em cada dire√ß√£o
	nblocks = ceil.(Int, extent ./ blocksizes)

	# modelo de blocos
    grid = CartesianGrid(minimum(bbox), maximum(bbox), dims=Tuple(nblocks))
end

# ‚ïî‚ïê‚ï° a73cc834-c600-4278-bc77-49b85dc90256
md"""
**Figura 16:** Modelo de blocos.
"""

# ‚ïî‚ïê‚ï° 12d79d77-358c-4098-993a-d5be538929a2
md"""
Utilize os sliders abaixo para rotacionar o modelo de blocos...

Rota√ß√£o em Z: $(@bind œà‚ÇÅ Slider(0:5:90, default=45, show_value=true))¬∞

Rota√ß√£o em X: $(@bind œà‚ÇÇ Slider(0:5:90, default=45, show_value=true))¬∞
"""

# ‚ïî‚ïê‚ï° 6f7663ed-c672-4d29-8b06-415dcdc8fbff
plot(grid, camera = (œà‚ÇÅ,œà‚ÇÇ), xlabel = "X", ylabel = "Y", zlabel = "Z")

# ‚ïî‚ïê‚ï° a8adf478-620d-4744-aae5-99d0891fe6b0
md"""

### Etapa 2: Defini√ß√£o do problema de estima√ß√£o

Para definirmos o problema de estima√ß√£o, devemos definir os seguintes par√¢metros:

- Furos georreferenciados;
- Modelo de blocos;
- Vari√°vel de interesse.

Neste exemplo, passaremos os furos georreferenciados `samples`, o modelo de blocos `grid` e a vari√°vel de interesse `:CU` como par√¢metros da fun√ß√£o `EstimationProblem`...
"""

# ‚ïî‚ïê‚ï° affacc76-18e5-49b2-8e7f-77499d2503b9
problem = EstimationProblem(samples, grid, :CU)

# ‚ïî‚ïê‚ï° 31cd3d10-a1e8-4ad8-958f-51de08d0fa54
md"""

### Etapa 3: Defini√ß√£o do estimador

Nesta etapa, devemos selecionar o estimador (solver) e configurar os par√¢metros de vizinhan√ßa. Neste exemplo, utilizaremos tr√™s estimadores:

- Inverso do Quadrado da Dist√¢ncia (IQD);
- Krigagem Simples (KS);
- Krigagem Ordin√°ria (KO).

No caso dos estimadores KS e OK, utilizaremos o modelo de variograma `Œ≥` e um volume de busca igual ao elipsoide de anisotropia `ellipsoid‚ÇÇ` definido anteriormente.

A m√©dia estacion√°ria, um par√¢metro que deve ser informado no caso da KS, ser√° definida como o valor da m√©dia declusterizada de Cu `Œº`.

Utilize os sliders abaixo para configurar o n√∫mero m√≠nimo `minneighbors` e m√°ximo `maxneighbors` de amostras que ser√£o utilizadas para se estimar cada bloco...
"""

# ‚ïî‚ïê‚ï° 9c61271d-4afe-4f7c-a521-8f799b6981ed
md"""

N√∫mero m√≠nimo de amostras: $(@bind nmin Slider(2:1:6, default=4, show_value=true))

N√∫mero m√°ximo de amostras: $(@bind nmax Slider(6:1:20, default=8, show_value=true))

"""

# ‚ïî‚ïê‚ï° 2a76c2b9-953e-4e4b-a98e-8e992943f60c
begin
	# m√©dia desclusterizada
    Œº = mean(samples, :CU)
	
	# IQD
	IQD = IDW(:CU => (power=2, neighbors=nmax))

	# KS
    KS = Kriging(
		:CU => (variogram=Œ≥, mean=Œº, neighborhood=ellipsoid‚ÇÇ,
			    minneighbors=nmin, maxneighbors=nmax)
	)

	# KO
    KO = Kriging(
		:CU => (variogram=Œ≥, neighborhood=ellipsoid‚ÇÇ,
			    minneighbors=nmin, maxneighbors=nmax)
	)

end;

# ‚ïî‚ïê‚ï° 9b3fe534-78fa-48db-a101-e2a43f2478d6
md"""

### Etapa 4: Solu√ß√£o do problema de estima√ß√£o

Para gerar o modelo de estimativas de Cu, resolvemos o problema definido com os tr√™s estimadores para, posteriormente, compar√°-los. Clique na caixa abaixo para executar as estimativas...

Executar estimativas: $(@bind run CheckBox())
"""

# ‚ïî‚ïê‚ï° e9b7e9b7-146f-4763-ad79-c93e111b25b4
if run
	sol_iqd = solve(problem, IQD)
end

# ‚ïî‚ïê‚ï° 78117ae8-d77c-4508-9793-3e7e9dfbb913
if run
	sol_ks = solve(problem, KS)
end

# ‚ïî‚ïê‚ï° 5e86ee34-60fe-43e4-851c-2f08072f836e
if run
	sol_ko = solve(problem, KO)
end

# ‚ïî‚ïê‚ï° 50650d2f-350b-446d-8c4b-6aa19e18c148
md"""
Agora que os teores de Cu foram estimados, clique na caixa abaixo para visualizar o modelo de teores (Figura 17). Em seguida, selecione, na lista suspensa abaixo, a solu√ß√£o que deseja visualizar...

Visualizar estimativas: $(@bind viz CheckBox())
"""

# ‚ïî‚ïê‚ï° bce98bc9-c676-4a2e-bdac-10a74a9cdeae
if run && viz
md"""
Solu√ß√£o: $(@bind selection Select(["IQD", "KS", "KO"], default="KO"))
"""
end

# ‚ïî‚ïê‚ï° ee41b8da-a488-478d-a424-ad46470652ae
@bind veg Radio(["potato", "carrot"])

# ‚ïî‚ïê‚ï° 3bc456e5-9030-41e5-a48c-179da59547c9
if run && viz
	md"""
	**Figura 17:** Visualiza√ß√£o das estimativas por $selection.
	"""
end

# ‚ïî‚ïê‚ï° 97b41da9-979a-4785-9ee4-19f43d912c49
if run && viz	
	if selection == "IQD"
		sol = sol_iqd
	elseif selection == "KS"
		sol = sol_ks
	elseif selection == "KO"
		sol = sol_ko
	end
end;

# ‚ïî‚ïê‚ï° 63d5db73-1073-4b8d-bfab-93577579571f
if run && viz
	cmin, cmax = coordinates.(extrema(grid))
		
	xm, ym, zm = cmin
	xM, yM, zM = cmax
	
	md"""
	Rota√ß√£o em Z: $(@bind œï‚ÇÅ Slider(0:5:90, default=45, show_value=true))¬∞

	Rota√ß√£o em X: $(@bind œï‚ÇÇ Slider(0:5:90, default=45, show_value=true))¬∞

	X: $(@bind x Slider(xm:xM, show_value=true, default=(xm+xM)/2)) m
	
	Y: $(@bind y Slider(ym:yM, show_value=true, default=(ym+yM)/2)) m
	
	Z: $(@bind z Slider(zm:zM, show_value=true, default=(zm+zM)/2)) m
	"""
end

# ‚ïî‚ïê‚ï° b2197d9c-0342-4efe-8c9e-ecf45a07fcf3
if run && viz
	sol |> @filter(!isnan(_.CU)) |>
	@map({CU = _.CU, COORDS = coordinates(centroid(_.geometry))}) |>
	@map({CU = _.CU, X = _.COORDS[1], Y = _.COORDS[2], Z = _.COORDS[3]}) |>
	@filter(_.X < x && _.Y < y && _.Z < z) |>
	@df scatter(:X, :Y, :Z, marker_z = :CU, color = :jet, marker = (:square, 4),
	            xlabel = "X", ylabel = "Y", zlabel = "Z",
		        xlims = (xm, xM), ylims = (ym, yM), zlims = (zm, zM),
	            label = "Modelo de teores de Cu (%)", camera = (œï‚ÇÅ, œï‚ÇÇ))
end

# ‚ïî‚ïê‚ï° 4f05c05d-c92a-460d-b3e0-d392111ef57a
md"""
## 9. Valida√ß√£o das estimativas

Nesta etapa, iremos comparar as estimativas geradas pelos tr√™s estimadores por meio de duas abordagens de valida√ß√£o:

- Valida√ß√£o global das estimativas;
- Q-Q plot entre teores amostrais e teores estimados.
"""

# ‚ïî‚ïê‚ï° fb8dc6e2-8708-41c5-b4ca-0f04b7a2bde5
md"""
Na **valida√ß√£o global das estimativas**, nos atentaremos para a compara√ß√£o entre os seguintes sum√°rios estat√≠sticos:

- Cu (amostral);
- Cu (desagrupado);
- Cu (estimado por IQD);
- Cu (estimado por KS);
- Cu (estimado por KO).

> ‚ö†Ô∏è Como a Krigagem leva em considera√ß√£o a redund√¢ncia amostral, √© mais conveniente compararmos a m√©dia Krigada com a a m√©dia declusterizada.

Compare os cinco sum√°rios estat√≠sticos gerados abaixo...
"""

# ‚ïî‚ïê‚ï° 92b731f3-5eae-406e-a593-4e6d49f476d9
if run
	sol_ks_filt = sol_ks |> @filter(!isnan(_.CU)) |> DataFrame
	sol_ko_filt = sol_ko |> @filter(!isnan(_.CU)) |> DataFrame
end;

# ‚ïî‚ïê‚ï° c6b0f335-19cb-4fbe-a47b-2ba3fd664832
if run
	
	stats_iqd = DataFrame(teor = "Cu (IQD)",
                         XÃÑ    = mean(sol_iqd[:CU]),
                         S¬≤   = var(sol_iqd[:CU]),
                         q10  = quantile(sol_iqd[:CU], 0.1),
                         md   = quantile(sol_iqd[:CU], 0.5),
                         q90  = quantile(sol_iqd[:CU], 0.9))
	
	stats_ks = DataFrame(teor = "Cu (KS)",
                         XÃÑ    = mean(sol_ks_filt[!,:CU]),
                         S¬≤   = var(sol_ks_filt[!,:CU]),
                         q10  = quantile(sol_ks_filt[!,:CU], 0.1),
                         md   = quantile(sol_ks_filt[!,:CU], 0.5),
                         q90  = quantile(sol_ks_filt[!,:CU], 0.9))

	
    stats_ko = DataFrame(teor = "Cu (KO)",
                         XÃÑ    = mean(sol_ko_filt[!,:CU]),
                         S¬≤   = var(sol_ko_filt[!,:CU]),
                         q10  = quantile(sol_ko_filt[!,:CU], 0.1),
                         md   = quantile(sol_ko_filt[!,:CU], 0.5),
                         q90  = quantile(sol_ko_filt[!,:CU], 0.9))

    [Cu_clus
	 Cu_decl
	 stats_iqd
	 stats_ks
	 stats_ko]

end

# ‚ïî‚ïê‚ï° ed97c749-30b7-4c72-b790-fef5a8332548
if run
	md"""
	##### Observa√ß√µes

	- As m√©dias estimadas s√£o pr√≥ximas √† m√©dia declusterizada;
	- Nota-se uma suaviza√ß√£o extrema da distribui√ß√£o dos teores estimados pelos tr√™s m√©todos em rela√ß√£o √† distribui√ß√£o dos teores amostrais. Isso √© evidenciado pela redu√ß√£o  de S¬≤;
	- IQD gerou estimativas menos suavizadas do que KO;
	- KO gerou estimativas menos suavizadas do que KS e IQD.
	
	> ‚ö†Ô∏è Os estimadores da fam√≠lia da Krigagem tendem a gerar estimativas que n√£o honram a real variabilidade do dep√≥sito (i.e. mais suavizadas). Uma alternativa seria a utiliza√ß√£o de t√©cnicas de **Simula√ß√£o Geoestat√≠stica**. Para ter uma breve introdu√ß√£o a esse t√≥pico, confira este [notebook](https://github.com/juliohm/CBMina2021/blob/main/notebook2.jl). 
	"""
end

# ‚ïî‚ïê‚ï° 263c1837-7474-462b-bd97-ee805baec458
md"""
J√° o **Q-Q plot entre os teores amostrais e os teores estimados** pode ser utilizado para realizar uma compara√ß√£o entre as distribui√ß√µes de Cu amostral e Cu estimado. Podemos analisar visualmente o grau de suaviza√ß√£o dos diferentes estimadores.

Compare os Q-Q plots gerados abaixo (Figura 18)...
"""

# ‚ïî‚ïê‚ï° 193dde9b-1f4a-4313-a3a6-ba3c89600bcb
if run

	qq_iqd = qqplot(
				   samples[:CU], sol_iqd[:CU],
		           color=:red, legend=:false,
                   xlabel="Cu amostral (%)",
		           ylabel="Cu estimado (%)",
                   title="IQD"
                   )
	
    qq_ks = qqplot(
				   samples[:CU], sol_ks_filt[!,:CU],
                   color=:red, legend=:false,
		           xlabel="Cu amostral (%)",
                   title="KS"
                   )
 
    qq_ko = qqplot(
				   samples[:CU], sol_ko_filt[!,:CU],
		           color=:green,
                   xlabel="Cu amostral (%)",
                   title="KO"
				  )

    plot(qq_iqd, qq_ks, qq_ko, layout=(1,3), size=(700,500))

end

# ‚ïî‚ïê‚ï° 6926d1bb-359d-46a5-abf5-e1700d0edcf0
if run
	md"""
	**Figura 18:** Q-Q plots entre os teores amostrais e estimados de Cu (%).
	"""
end

# ‚ïî‚ïê‚ï° 2181506b-76f5-4a57-adba-e90679b2b21b
md"""

##### Observa√ß√µes

- A KO mostra uma menor suaviza√ß√£o em rela√ß√£o aos demais m√©todos;
- M√©todos de Krigagem s√£o conhecidos por suavizar inadequadamente a distribui√ß√£o de teores.
"""

# ‚ïî‚ïê‚ï° 5ad612f4-76e9-4867-b4c8-4c35540a5f47
md"""
## 10. Exporta√ß√£o das estimativas

Nesta √∫ltima se√ß√£o, iremos exportar as estimativas geradas pelo m√©todo da Krigagem Ordin√°ria em dois formatos distintos:

- GSLIB;
- CSV.

Marque a caixa abaixo para executar a exporta√ß√£o das estimativas em ambos os formatos...

Salvar estimativas: $(@bind store CheckBox())
"""

# ‚ïî‚ïê‚ï° b96c4bd5-54ba-4394-b963-5c5ddc06cf3b
# GSLIB
if run && store
	save("output/estimativas_KO.gslib", sol_ko)
end;

# ‚ïî‚ïê‚ï° 79bc4b7d-72de-4c9e-94f5-3b5ba6bbff1d
function csvtable(solution, variable)
	center = centroid.(domain(solution))
	
	coords = coordinates.(center)
	
	X = getindex.(coords, 1)
	
	Y = getindex.(coords, 2)
	
	Z = getindex.(coords, 3)
	
	mean = solution[variable]
	
	var  = solution[variable*"-variance"]
	
	DataFrame(MEAN=mean, VARIANCE=var, X=X, Y=Y, Z=Z)
end;

# ‚ïî‚ïê‚ï° 245c7304-1cc0-408a-97ec-867ac0cc81b0
# CSV
if run && store
	csvtable(sol_ko, "CU") |> CSV.write("output/estimativas_KO.csv")
end;

# ‚ïî‚ïê‚ï° 1164ba05-0835-4713-b11c-92b37085b744
md"""
## Recursos adicionais

Abaixo, s√£o listados alguns recursos complementares a este notebook:

> [Workshop GeoStats.jl - CBMina 2021](https://github.com/juliohm/CBMina2021)

> [Tutoriais GeoStats.jl - Notebooks](https://github.com/JuliaEarth/GeoStatsTutorials)

> [Tutoriais GeoStats.jl - V√≠deos](https://www.youtube.com/playlist?list=PLsH4hc788Z1f1e61DN3EV9AhDlpbhhanw)

"""

# ‚ïî‚ïê‚ï° 16baa4c7-2807-4aaf-9ace-dbc4d2f960c7
md"""
## Pacotes utilizados

Os seguintes pacotes foram utilizados neste notebook:

|                       Pacote                             |        Descri√ß√£o        |
|:--------------------------------------------------------:|:-----------------------:|
|[GeoStats](https://github.com/JuliaEarth/GeoStats.jl)     | Rotinas geoestat√≠sticas |
|[DrillHoles](https://github.com/JuliaEarth/DrillHoles.jl) | Furos de sondagem       |
|[CSV](https://github.com/JuliaData/CSV.jl)                | Arquivos CSV            |
|[DataFrames](https://github.com/JuliaData/DataFrames.jl)  | Manipula√ß√£o de tabelas  |
|[Query](https://github.com/queryverse/Query.jl)           | Realiza√ß√£o de consultas |
|[Statistics](https://docs.julialang.org/en/v1/)           | C√°lculo de estat√≠sticas |
|[StatsBase](https://github.com/JuliaStats/StatsBase.jl)   | C√°lculo de estat√≠sticas |
|[LinearAlgebra](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/)   | √Ålgebra linear |
|[Random](https://docs.julialang.org/en/v1/)               | N√∫meros aleat√≥rios      |
|[FileIO](https://github.com/JuliaIO/FileIO.jl)            | Covers√£o entre formatos |
|[PlutoUI](https://github.com/fonsp/PlutoUI.jl)            | Widgets interativos     |
|[Plots](https://github.com/JuliaPlots/Plots.jl)           | Visualiza√ß√£o dos dados  |
|[StatsPlots](https://github.com/JuliaPlots/StatsPlots.jl) | Visualiza√ß√£o dos dados  |

"""

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄ980f4910-96f3-11eb-0d4f-b71ad9888d73
# ‚ïü‚îÄ14ac7b6e-9538-40a0-93d5-0379fa009872
# ‚ïü‚îÄ6b7e7c5d-7a86-4ea4-a47e-fb4148030c1a
# ‚ïü‚îÄ3afd7a32-3696-4cea-b00c-b52bfdb003ba
# ‚ïü‚îÄc544614a-3e5c-4d22-9340-592aabf84871
# ‚ïü‚îÄ3353d0be-4280-4ffd-824b-745bb6b64f41
# ‚ïü‚îÄ8e2b3339-a65d-4e1b-a9fb-69b6cd4631ea
# ‚ïü‚îÄaf1aca7e-bde2-4e14-a664-b7c71ff80ffe
# ‚ïü‚îÄff01a7d7-d491-4d49-b470-a2af6783c82b
# ‚ï†‚ïê444402c6-99a3-4829-9e66-c4962fb83612
# ‚ïü‚îÄ0d0d610a-b06c-4c16-878d-8d2d124b8b9e
# ‚ï†‚ïê1d7df6f8-f643-4c1e-92b4-52e51c4ccda8
# ‚ïü‚îÄbb8336ba-f347-418c-8883-47d86350bc94
# ‚ï†‚ïê412cfe3d-f9f1-49a5-9f40-5ab97946df6d
# ‚ïü‚îÄd343401d-61dc-4a45-ab9b-beaff2534886
# ‚ïü‚îÄec102b27-79e2-4a91-99d6-dff061752855
# ‚ïü‚îÄbedcf585-53ef-4cf6-9dc2-d3fc9cff7755
# ‚ï†‚ïê15fd1c4d-fbf2-4389-bc1c-eabbbd26817b
# ‚ïü‚îÄ39ae0ea7-9659-4c7b-b161-fd9c3495f4e3
# ‚ïü‚îÄf9545a95-57c0-4de6-9ab7-3ac3728b3d27
# ‚ï†‚ïê4d5f2467-c7d5-4a82-9968-97f193090bd6
# ‚ïü‚îÄ2af7dfc5-a26a-4ad3-a046-31d1dfa107f1
# ‚ïü‚îÄee6c8dfa-d8be-4b5a-bfe0-9e1b3f394e9d
# ‚ïü‚îÄf4bd13d4-70d3-4167-84ff-9d3c7200e143
# ‚ïü‚îÄ41790d87-ce85-461f-a16d-04821a3624bb
# ‚ïü‚îÄf40bca06-6a3e-4807-9857-ff17d21893bc
# ‚ïü‚îÄ7ea21049-5edd-4979-9782-8a20d4bb287b
# ‚ïü‚îÄd8ce39f1-8017-4df3-a55d-648bdd3dbc04
# ‚ï†‚ïê32f75604-b01a-4a0b-a008-33b2a56f4b57
# ‚ïü‚îÄb6712822-7c4d-4936-bcc2-21b48be99a66
# ‚ïü‚îÄ87808ab0-3bcb-428d-9ebf-71ffefbcb357
# ‚ïü‚îÄ280db32e-cebf-4d51-bfcb-54d456f2194b
# ‚ïü‚îÄ893d7d19-878b-4990-80b1-ef030b716048
# ‚ïü‚îÄb85a7c2f-37e2-48b0-a1db-984e2e719f29
# ‚ï†‚ïê676bea93-69a9-4f2c-bb3e-759a9d28b12e
# ‚ï†‚ïê59dfbb66-f188-49f1-87ba-4f7020c4c031
# ‚ïü‚îÄ7a021fbd-83ac-4a36-bb8c-98519e6f8acb
# ‚ïü‚îÄfb67daea-0b8b-47da-b06c-8256566f9ba0
# ‚ïü‚îÄf2be5f11-1923-4658-93cf-800ce57c32d3
# ‚ïü‚îÄecec08be-b9da-4913-9f5a-3a77631fa96e
# ‚ïü‚îÄd00f02fc-3c14-4911-a36b-209c747f96cb
# ‚ïü‚îÄb95a6def-f3e6-4835-b15f-2a48577006f4
# ‚ïü‚îÄ81a5831f-75ef-478b-aba5-70d19306798e
# ‚ïü‚îÄ0808061f-4856-4b82-8560-46a59e669ac4
# ‚ïü‚îÄc0604ed8-766e-4c5d-a628-b156615f8140
# ‚ïü‚îÄ074bff0b-6b41-4bbc-9b5c-77fbf62c4dc6
# ‚ïü‚îÄeac8e835-83bc-4f9c-b25b-3aaddcf69611
# ‚ïü‚îÄ8bb2f630-8234-4f7f-a05c-8206993bdd45
# ‚ïü‚îÄ862dd0cf-69ae-48e7-92fb-ff433f62e67c
# ‚ïü‚îÄea0968ca-a997-40c6-a085-34b3aa89807e
# ‚ïü‚îÄ52c28a55-3a4a-4df3-841a-ab8fc748bf55
# ‚ïü‚îÄ3ae99e49-6996-4b4a-b930-f6073994f25c
# ‚ïü‚îÄccbcf57e-d00b-43df-8555-eee8bf4f9e6f
# ‚ïü‚îÄc6c41764-509c-4f40-b063-a5f85dcc16db
# ‚ïü‚îÄ3c2eb77b-60e9-4aeb-9d19-ba22293741f9
# ‚ï†‚ïê63b75ae2-8dca-40e3-afe0-68c6a639f54e
# ‚ïü‚îÄ5699c563-d6cb-4bc2-8063-e1be00722a41
# ‚ïü‚îÄ16cb8eaa-773e-4a42-ae8d-00bebddedc59
# ‚ïü‚îÄaf160a03-10ea-404e-87a3-e6417058449f
# ‚ïü‚îÄ161cc157-9667-48b5-8832-586c4bb0c476
# ‚ïü‚îÄ6ec16d83-d8fb-45d0-a7f8-d75f712b4c91
# ‚ïü‚îÄe49b7b48-77d8-4abf-a5df-70e9c65e3667
# ‚ïü‚îÄb02263dc-280a-40b4-be1e-9c3b6873e153
# ‚ïü‚îÄ6d520cfe-aa7b-4083-b2bf-b34f840c0a75
# ‚ïü‚îÄ289865a9-906f-46f4-9faa-f62feebbc92a
# ‚ïü‚îÄ1db51803-8dc4-4db6-80a1-35a489b6fb9e
# ‚ïü‚îÄa717d5d3-9f4e-4a2d-8e32-f0605bbd742f
# ‚ïü‚îÄffe3700c-262f-4949-b910-53cbe1dd597b
# ‚ïü‚îÄ8348abd3-27f6-4161-bd04-c4be6a644888
# ‚ïü‚îÄ1465f010-c6a7-4e72-9842-4504c6dda0be
# ‚ïü‚îÄ0b46230a-b305-4840-aaad-e985444cf54e
# ‚ïü‚îÄc6d0a87e-a09f-4e78-9672-c858b488fd39
# ‚ïü‚îÄfc2ea8f3-064a-4d6d-8115-236c8160cc23
# ‚ïü‚îÄ0585add6-1320-4a31-a318-0c40b7a444fa
# ‚ïü‚îÄ09d95ff8-3ba7-4031-946b-8ba768dae5d5
# ‚ïü‚îÄd07a57c3-0a7a-49c2-a840-568e72d50545
# ‚ïü‚îÄbda3cda3-9d57-495b-be79-1415aa95707f
# ‚ïü‚îÄ17b21a63-9fa6-4975-9302-5465cdd3d2fa
# ‚ïü‚îÄ9389a6f4-8710-44c3-8a56-804017b6239b
# ‚ïü‚îÄ99baafe5-6249-4eda-845f-d7f6219d5726
# ‚ïü‚îÄ294ac892-8952-49bc-a063-3d290c375ea5
# ‚ïü‚îÄ668da8c2-2db6-4812-90ce-86b17b289cc6
# ‚ïü‚îÄ774f8e10-fd10-4b16-abcf-20579f174f8a
# ‚ïü‚îÄ97670210-2c91-4be7-a607-0da83cb16f44
# ‚ïü‚îÄeb9ebce2-7476-4f44-ad4f-10a1ca522143
# ‚ïü‚îÄfa93796d-7bc0-4391-89a7-eeb63e1a3838
# ‚ïü‚îÄ24981600-3336-4295-b567-8f05785b9346
# ‚ïü‚îÄ92d11f3b-c8be-4701-8576-704b73d1b619
# ‚ïü‚îÄ55373bb0-6953-4c6f-b1dd-2dacac90b6cc
# ‚ïü‚îÄ6c048b83-d12c-4ce8-9e9a-b89bf3ef7638
# ‚ïü‚îÄ0def0326-55ef-45db-855e-a9a683b2a76d
# ‚ïü‚îÄa92f702d-8859-4f95-b676-36deab03e717
# ‚ïü‚îÄ120f4a9c-2ca6-49f1-8abc-999bcc559149
# ‚ïü‚îÄ34b9b30f-615d-43ff-8d07-ed757cd69a7f
# ‚ïü‚îÄa74b7c50-4d31-4bd3-a1ef-6869abf73185
# ‚ïü‚îÄb19e5ac0-21fd-4dcd-ac61-a36a67ee80dd
# ‚ïü‚îÄ922d81f3-0836-4b14-aaf2-83be903c8642
# ‚ïü‚îÄfed7dbb1-8dfd-4242-a060-7b44508ce432
# ‚ïü‚îÄ0927d78e-9b50-4aaf-a93c-69578608a4f8
# ‚ïü‚îÄ33ba8a9b-f548-4984-8a31-1c381b31ced4
# ‚ïü‚îÄdacfe446-3c19-430d-8f5f-f276a022791f
# ‚ïü‚îÄ38946a3f-d5a6-4a1c-a1d5-d4ec475f1545
# ‚ïü‚îÄ483487c6-acf8-4551-8357-2e69e6ff44ff
# ‚ïü‚îÄc9ac9fb4-5d03-43c9-833e-733e48565946
# ‚ïü‚îÄ5134e2cb-8c98-4e5e-9f13-722b8f828dc7
# ‚ïü‚îÄd700e40b-dd7f-4630-a29f-f27773000597
# ‚ï†‚ïê38d15817-f3f2-496b-9d83-7dc55f4276dc
# ‚ïü‚îÄb2156251-26ae-4b1d-8757-ffdf3a02a2f8
# ‚ïü‚îÄ51f8bc33-a24f-4ce4-a81b-cd22fb8312ec
# ‚ïü‚îÄ9baefd13-4c16-404f-ba34-5982497e8da6
# ‚ïü‚îÄa7a59395-59ec-442a-b4b6-7db55d150d53
# ‚ï†‚ïêf7cee6a3-5ac2-44ff-9d5e-58ede7327c46
# ‚ïü‚îÄ6f7663ed-c672-4d29-8b06-415dcdc8fbff
# ‚ïü‚îÄa73cc834-c600-4278-bc77-49b85dc90256
# ‚ïü‚îÄ12d79d77-358c-4098-993a-d5be538929a2
# ‚ïü‚îÄa8adf478-620d-4744-aae5-99d0891fe6b0
# ‚ï†‚ïêaffacc76-18e5-49b2-8e7f-77499d2503b9
# ‚ïü‚îÄ31cd3d10-a1e8-4ad8-958f-51de08d0fa54
# ‚ï†‚ïê2a76c2b9-953e-4e4b-a98e-8e992943f60c
# ‚ïü‚îÄ9c61271d-4afe-4f7c-a521-8f799b6981ed
# ‚ïü‚îÄ9b3fe534-78fa-48db-a101-e2a43f2478d6
# ‚ï†‚ïêe9b7e9b7-146f-4763-ad79-c93e111b25b4
# ‚ï†‚ïê78117ae8-d77c-4508-9793-3e7e9dfbb913
# ‚ï†‚ïê5e86ee34-60fe-43e4-851c-2f08072f836e
# ‚ïü‚îÄ50650d2f-350b-446d-8c4b-6aa19e18c148
# ‚ïü‚îÄbce98bc9-c676-4a2e-bdac-10a74a9cdeae
# ‚ïü‚îÄb2197d9c-0342-4efe-8c9e-ecf45a07fcf3
# ‚ï†‚ïêee41b8da-a488-478d-a424-ad46470652ae
# ‚ïü‚îÄ3bc456e5-9030-41e5-a48c-179da59547c9
# ‚ïü‚îÄ97b41da9-979a-4785-9ee4-19f43d912c49
# ‚ïü‚îÄ63d5db73-1073-4b8d-bfab-93577579571f
# ‚ïü‚îÄ4f05c05d-c92a-460d-b3e0-d392111ef57a
# ‚ïü‚îÄfb8dc6e2-8708-41c5-b4ca-0f04b7a2bde5
# ‚ïü‚îÄ92b731f3-5eae-406e-a593-4e6d49f476d9
# ‚ïü‚îÄc6b0f335-19cb-4fbe-a47b-2ba3fd664832
# ‚ïü‚îÄed97c749-30b7-4c72-b790-fef5a8332548
# ‚ïü‚îÄ263c1837-7474-462b-bd97-ee805baec458
# ‚ïü‚îÄ193dde9b-1f4a-4313-a3a6-ba3c89600bcb
# ‚ïü‚îÄ6926d1bb-359d-46a5-abf5-e1700d0edcf0
# ‚ïü‚îÄ2181506b-76f5-4a57-adba-e90679b2b21b
# ‚ïü‚îÄ5ad612f4-76e9-4867-b4c8-4c35540a5f47
# ‚ï†‚ïêb96c4bd5-54ba-4394-b963-5c5ddc06cf3b
# ‚ï†‚ïê245c7304-1cc0-408a-97ec-867ac0cc81b0
# ‚ïü‚îÄ79bc4b7d-72de-4c9e-94f5-3b5ba6bbff1d
# ‚ïü‚îÄ1164ba05-0835-4713-b11c-92b37085b744
# ‚ïü‚îÄ16baa4c7-2807-4aaf-9ace-dbc4d2f960c7
